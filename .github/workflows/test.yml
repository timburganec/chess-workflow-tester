name: run test scenarios
on:
  workflow_call:
jobs:
  tests:
    strategy:
      max-parallel: 1
      matrix:
        scenario: ['test-1']
    name: ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}
    continue-on-error: false
    steps:
      - name: name
        run: cat ${{ matrix.scenario }}/_name
      - name: setup
        run: |
          # delete all issues
          PAGER= gh issue list --state all --state all | awk '{print $1}' > issue_ids
          cat issue_ids | while read issue_id; do gh issue delete $issue_id; done
          
          # PGN game file
          rm -f chess.pgn
          cp test-shared/chess.setup.pgn chess.pgn 2>/dev/null || true
          cp ${{ matrix.scenario }}/chess.setup.pgn chess.pgn 2>/dev/null || true
          
          # stats
          rm -f stats.txt
          cp test-shared/stats.setup.txt stats.txt 2>/dev/null || true
          cp ${{ matrix.scenario }}/stats.setup.txt stats.txt 2>/dev/null || true
          
          # leaderboard
          rm -f leaderboard.txt
          cp test-shared/leaderboard.setup.txt leaderboard.txt 2>/dev/null || true
          cp ${{ matrix.scenario }}/leaderboard.setup.txt leaderboard.txt 2>/dev/null || true
          
          # readme
          rm -f README.md
          cp test-shared/README.setup.md README.md 2>/dev/null || true
          cp ${{ matrix.scenario }}/README.setup.md README.md 2>/dev/null || true

          # game is valid - allow user to move
          rm -f issue_id
          gh issue create --title "$(cat ${{ matrix.scenario }}-setup-issue-title.txt)" --body 'meh' | awk -F'/' '{print $NF}' > issue_id

      - name: run
        run: |
          # Find workflow related to the issue_id above.
          # There's no easy way I know to do this, see https://github.com/timburgan/personal/issues/17
          # So.. fuzzy match: List created from issues in last 5 minutes, currently in_progress, select the latest
          rm -f run_id
          gh run list --json 'event,createdAt,conclusion,status,url' | 
            jq '[ .[] | select(.event == "issues" and .status == "in_progress" and select(.createdAt | fromdateiso8601 > now - 301)) ][0].url' -r |
            awk -F'/' '{print $NF}' > run_id

          # wait until that workflow run is finished
          gh run watch $(cat run_id)

      - name: assertions
        run: |
          rm -f issue
          gh issue view $(cat issue_id) --json 'author,comments,reactionGroups,state' > issue

          # issue reactions as expected
          REACTIONS=$(cat issue | jq '.reactionGroups[] | select(.content == "$(cat issue.expected.json | jq .reaction)").users.totalCount')
          if [[ "$REACTIONS" != "1" ]]; then
            echo "FAILURE Issue reactions are not as expected: $(cat issue.expected.json | jq .reaction)"
            cat issue
            exit 1
          fi

          # issue comments as expected
          rm -f issue_author
          COMMENTS=$(cat issue | jq -c --arg expected "$(cat issue.expected.json | jq .comment)" '.comments[] | select(.body | contains($expected)) | length')
          if [[ -z ${COMMENTS+x} ]]; then
            echo "FAILURE Issue comments doesn't contain the expected: $(cat issue.expected.json | jq .comment)"
            cat issue
            exit 1
          fi

          # issue status as expected
          STATUS=$(cat issue | jq '.state' -r)
          if [[ "$STATUS" != "$(cat issue.expected.json | jq .state)" ]]; then
            echo "FAILURE Issue status is not as expected: $(cat issue.expected.json | jq .state)"
            cat issue
            exit 1
          fi

          # get latest copy of repo to test against
          DIR="$(cat issue_id)_$(cat issue_author)""
          mkdir $DIR
          gh repo clone ${{ github.repository }} -- --single-branch --branch "$(cat issue_id)_$(cat issue_author)" $DIR
          cd $DIR

          # game file as expected
          if [[ ! cmp -s ${{ matrix.scenario }}-expected.png game.png ]]; then
            echo "FAILURE Game PGN file is not as expected"
            echo "EXPECTED:"
            cat ${{ matrix.scenario }}-expected.pgn
            echo "ACTUAL:"
            cat game.pgn
          fi

          # stats file as expected
          if [[ ! cmp -s ${{ matrix.scenario }}-expected.stats stats.txt ]]; then
            echo "FAILURE Stats file is not as expected"
            echo "EXPECTED:"
            cat ${{ matrix.scenario }}-expected.stats
            echo "ACTUAL:"
            cat stats.txt
          fi

          # leaderboard file is as expected
          if [[ ! cmp -s ${{ matrix.scenario }}-expected.leaderboard leaderboard.txt ]]; then
            echo "FAILURE Leaderboard file is not as expected"
            echo "EXPECTED:"
            cat ${{ matrix.scenario }}-expected.leaderboard
            echo "ACTUAL:"
            cat leaderboard.txt
          fi

          # readme file is as expected
          if [[ ! cmp -s ${{ matrix.scenario }}-expected.md README.md ]]; then
            echo "FAILURE README file is not as expected"
            echo "EXPECTED:"
            cat ${{ matrix.scenario }}-expected.md
            echo "ACTUAL:"
            cat README.md
          fi
